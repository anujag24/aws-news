---
AWSTemplateFormatVersion: '2010-09-09'

Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
    Default: 'dev'
    AllowedValues:
      - 'dev'
      - 'test'
      - 'prod'

  ProjectName:
    Type: String
    Description: The name of this project
    Default: 'aws-news'

  AppSyncApiId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: AWS AppSync API ID -- created by Amplify

  ArticlesTable:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Name of DyanmoDB Articles table -- created by Amplify

  ElasticacheEndpoint:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Elasticache Endpoint

  ElasticachePort:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Elasticache Port

  ElasticacheAccessSG:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::SecurityGroup::Id>
    Description: Security Group allowing access to Elasticache

  LambdaSubnet1:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Subnet::Id>
    Description: Subnet for Lambda 1

  LambdaSubnet2:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Subnet::Id>
    Description: Subnet for Lambda 2

Globals:
  Function:
    Runtime: nodejs12.x
    Handler: index.handler
    Timeout: 25
    Tags:
      Project: !Ref ProjectName
      Env: !Ref Stage

Resources:
  ElastiCacheIntegrationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: elasticache-integration/
      Policies:
        - VPCAccessPolicy: {}
      VpcConfig:
        SecurityGroupIds:
          - !Ref ElasticacheAccessSG
        SubnetIds:
          - !Ref LambdaSubnet1
          - !Ref LambdaSubnet2
      Environment:
        Variables:
          ELASTICACHE_ENDPOINT: !Ref ElasticacheEndpoint
          ELASTICACHE_PORT: !Ref ElasticachePort
          LATEST_CONTENT_KEY: "articles:latest"
          POPULAR_CONTENT_KEY: "articles:popular"
          BLOG_COUNT_KEY: "blog:count:"

  ## AppSync Integration ##
  ElastiCacheIntegrationDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref AppSyncApiId
      Name: ElastiCacheIntegration
      Description: Lambda function to integrate with Elasticache
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt ElastiCacheIntegrationFunction.Arn

  # Query.latestArticles resolver
  LatestArticlesQueryResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref AppSyncApiId
      TypeName: Query
      FieldName: latestArticles
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt GetLatestArticlesFunction.FunctionId
          - !GetAtt BatchGetArticlesFunctions.FunctionId
      RequestMappingTemplate: |
        {}
      ResponseMappingTemplate: |
        $util.toJson($ctx.prev.result)

  # Query.popularArticles resolver
  PopularArticlesQueryResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref AppSyncApiId
      TypeName: Query
      FieldName: popularArticles
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt GetPopularArticlesFunction.FunctionId
          - !GetAtt BatchGetArticlesFunctions.FunctionId
      RequestMappingTemplate: |
        {}
      ResponseMappingTemplate: |
        $util.toJson($ctx.prev.result)

  # Get latest articles via elasticache integration data source
  GetLatestArticlesFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !Ref AppSyncApiId
      DataSourceName: !GetAtt ElastiCacheIntegrationDataSource.Name
      FunctionVersion: "2018-05-29"
      Name: GetLatestArticles
      Description: >
        Queries ElastiCache via Lambda data source to retrieve list of
        latest article ids.
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "action": "latestArticles",
            "args":  {
              "limit": $util.defaultIfNull($ctx.args.limit, 10),
              "nextToken": "$util.defaultIfNullOrEmpty($ctx.args.nextToken, '')"
            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.result && $ctx.result.error)
          $util.error($ctx.result.error)
        #end
        $util.toJson($ctx.result)

  # Get popular articles via elasticache integration data source
  GetPopularArticlesFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !Ref AppSyncApiId
      DataSourceName: !GetAtt ElastiCacheIntegrationDataSource.Name
      FunctionVersion: "2018-05-29"
      Name: GetPopularArticles
      Description: >
        Queries ElastiCache via Lambda data source to retrieve list of
        popular article ids.
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "action": "popularArticles",
            "args":  {
              "limit": $util.defaultIfNull($ctx.args.limit, 10),
              "nextToken": "$util.defaultIfNullOrEmpty($ctx.args.nextToken, '')"
            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.result && $ctx.result.error)
          $util.error($ctx.result.error)
        #end
        $util.toJson($ctx.result)

  # Loads details on batch of Articles from DynamoDB
  BatchGetArticlesFunctions:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !Ref AppSyncApiId
      DataSourceName: ArticleTable # this seems to be consistent across environments
      FunctionVersion: "2018-05-29"
      Name: BatchGetArticles
      Description: >
        Retrieves batch of articles from DynamoDB data source.
      RequestMappingTemplate: !Sub |
        #if($ctx.prev.result.ids.size() == 0)
          #set($result = {})
          $util.qr($result.put("items", []))
          $util.qr($result.put("nextToken", $ctx.prev.result.nextToken))
          #return($result)
        #end
        #set($ids = [])
        #foreach($result in $ctx.prev.result.ids)
          #set($map = {})
          $util.qr($map.put("id", $util.dynamodb.toString($result)))
          $util.qr($ids.add($map))
        #end
        {
          "version" : "2018-05-29",
          "operation" : "BatchGetItem",
          "tables" : {
            "${ArticlesTable}": {
              "keys": $util.toJson($ids),
              "consistentRead": true
            }
          }
        }
      ResponseMappingTemplate: !Sub |
        #if($ctx.result && $ctx.result.error)
          $util.error($ctx.result.error)
        #end
        {
          "items": $util.toJson($ctx.result.data.${ArticlesTable}),
          "nextToken": "$util.defaultIfNullOrEmpty($ctx.prev.result.nextToken, '')"
        }

  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
      Policies:
        - PolicyName: !Sub "${ProjectName}-appsync-elasticache-data-source-policy-${Stage}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ElastiCacheIntegrationFunction.Arn

