---
AWSTemplateFormatVersion: '2010-09-09'

Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  Stage:
    Type: String
    Description: The stage where the application is running in, e.g., dev, prod.
    Default: 'dev'

  ProjectName:
    Type: String
    Description: The name of this project
    Default: 'aws-news'

  AppSyncApiId:
    Type: String
    Description: AWS AppSync API ID -- created by Amplify
  
  AppSyncEndpoint:
    Type: String
    Description: AWS AppSync Endpoint -- created by Amplify

  BlogsTable:
    Type: String
    Description: Name of DyanmoDB Blogs table -- created by Amplify

  ArticlesTable:
    Type: String
    Description: Name of DyanmoDB Articles table -- created by Amplify

  ContentBucket:
    Type: String
    Description: Content storage bucket -- created by Amplify

  LayerArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: ARN for Lambda Layer

Globals:
  Function:
    Runtime: ruby2.5
    Handler: app.handler
    Timeout: 25
    Tags:
      Project: !Ref ProjectName
      Env: !Ref Stage

Resources:
  ProcessAllBlogsStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "aws-news-process-all-blogs-${Stage}"
      RoleArn: !GetAtt ProcessAllBlogsStateMachineRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Check AWS Blogs for new content.",
          "StartAt": "Load blogs from DynamoDB",
          "States": {
            "Load blogs from DynamoDB": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload.items",
              "Parameters": {
                "FunctionName": "${LoadBlogsFunction.Arn}"
              },
              "Next": "Process blogs"
            },
            "Process blogs": {
              "Type": "Map",
              "Next": "Finish",
              "ItemsPath": "$",
              "Parameters": {
                "blog.$": "$$.Map.Item.Value"
              },
              "Iterator": {
                "StartAt": "Process individual blog",
                "States": {
                  "Process individual blog": {
                    "Comment": "Process each blog in list provided by parent",
                    "Type": "Task",
                    "Resource": "arn:aws:states:::states:startExecution",
                    "Parameters": {
                      "StateMachineArn": "${ProcessBlogStateMachine}",
                      "Input": {
                        "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                        "Blog.$": "$.blog"
                      }
                    },
                    "End": true
                  }
                }
              }
            },
            "Finish": {
              "Type": "Succeed"
            }
          }
        }
  
  ProcessBlogStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "aws-news-process-blog-${Stage}"
      RoleArn: !GetAtt ProcessBlogStateMachineRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Check AWS Blog for new content",
          "StartAt": "Check blog for new posts",
          "States": {
            "Check blog for new posts": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ProcessBlogFunction.Arn}",
                "Payload": {
                  "blog.$": "$.Blog"
                }
              },
              "ResultPath": "$.Result",
              "OutputPath": "$.Result.Payload",
              "Next": "Update blog lastImportAt timestamp",
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "Next": "Handle error"
              }]
            },
            "Update blog lastImportAt timestamp": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${BlogsTable}",
                "Key": {
                  "id": { "S.$": "$.BlogId" }
                },
                "UpdateExpression": "SET #li = :importAt",
                "ExpressionAttributeNames": {
                  "#li": "lastImportAt"
                },
                "ExpressionAttributeValues": {
                  ":importAt": { "S.$": "$.ImportAt" }
                }
              },
              "End": true
            },
            "Handle error": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sqs:sendMessage",
              "Parameters": {
                "QueueUrl": "${ProcessFailureQueue}",
                "MessageBody": "$"
              },
              "ResultPath": "$.SQS",
              "End": true
            }
          }
        }

  ### Lambda ###
  LoadBlogsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Load blogs to be indexed by the service
      CodeUri: loadBlogs/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BlogsTable
        - Version: '2012-10-17' # Policy Document
          Statement: # per docs, EventBridge only supports * today (@see https://github.com/awslabs/serverless-application-model/issues/1187)
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: '*'
      Layers:
        - !Ref LayerArn
      Environment:
        Variables:
          BLOGS_TABLE: !Ref BlogsTable
          EVENT_BUS: !Ref EventBus
  
  ProcessBlogFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Process single blog, write new posts to articles table
      CodeUri: processBlog/
      Timeout: 300
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ArticlesTable
        - S3CrudPolicy:
            BucketName: !Ref ContentBucket
        - Version: '2012-10-17' # Policy Document
          Statement: # per docs, EventBridge only supports * today (@see https://github.com/awslabs/serverless-application-model/issues/1187)
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: '*'
      Layers:
        - !Ref LayerArn
      Environment:
        Variables:
          ARTICLES_TABLE: !Ref ArticlesTable
          CONTENT_BUCKET: !Ref ContentBucket
          EVENT_BUS: !Ref EventBus

  NewContentEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: newContentEvent
      Handler: index.handler
      Runtime: nodejs10.x
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - appsync:GraphQL
              Resource:
                - !Sub "arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${AppSyncApiId}/types/Mutation/fields/updateBlog"
                - !Sub "arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${AppSyncApiId}/types/Mutation/fields/updateArticle"
      Environment:
        Variables:
          APPSYNC_ENDPOINT: !Ref AppSyncEndpoint
      Events:
        OnCreateEvent:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref EventBus
            Pattern:
              detail-type:
                - blog_created
                - article_created

  ### SQS ###
  ProcessFailureQueue:
    Type: AWS::SQS::Queue

  ### EventBridge ###
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${ProjectName}-${Stage}-eventbus"

  ## TODO: add event bridge to trigger processing hourly?


  ### IAM ###
  ProcessAllBlogsStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StatesInvokeLoadBlogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt LoadBlogsFunction.Arn
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Ref ProcessBlogStateMachine

  ProcessBlogStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StatesInvokeLoadBlogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ProcessBlogFunction.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt ProcessFailureQueue.Arn
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BlogsTable}"